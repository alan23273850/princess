import ap.Quantum
import ap.SimpleAPI
import ap.parser._
import ap.theories.ADT.BoolADT.{True, False}
import scala.collection.mutable.ListBuffer
import IExpression._
import scala.math.{pow, asin, Pi, BigInt}
import ap.theories.arrays._ // CartArray, CombArray
// import scala.reflect.runtime.currentMirror
import scala.collection.mutable.ArrayBuffer
import scala.collection.immutable.Map

class GroverSingleBugClass(val N: Int, val LGQ: List[(String, List[Int])]) extends Quantum(N) {
  import CartTheory.arraySto
  SimpleAPI.withProver(enableAssert = debug, otherSettings = settings) { p => import p._

    val states = ListBuffer(createConstant(arrayN.sort))

    val aH = Map(3 -> (11, 7))//, 12 -> (BigInt("209491273914069228938927703159615696187222341014075909563660555762272712788540723338447145178084239202207812130136290161243408801398046679755101305728001"), 506), 14 -> (BigInt("2203965129209035120661030567126741379588288246755263842321191277052520257239714477065027866600440842405734794788432210222370569309128599730111703958961640917508693324753367185223795358536303775007164591600969910801717290890343486851137454388553335222109931750645964706689462759661310873692578072820486233293839364152186571320390396328024660406798192485213035261953"), 1207), 16 -> (BigInt("-3211036293823834468163485585218522051687270859474390135888305454290600022539539577695167362911621040121418572659029364665139571852467594960143540349664544739742307284490670953099806885599584317589352795819147694426596941687379109609957969747254406060493308961127826097430088669811340026897613387897112523777333381646161873146917106343897955220198193589690600640060143367916785626722602670569989231313094422077905499166880830278364069181638932898980947688831943075215431625332906265378982235118008719907871536227145316606149371486917984819287013390715693034173364303412821918205759858079749494319367147800920632103869111115636936788850712529417675010194893670891526644493319606998186162333090720890809887776300542166043063229384530657963071900362028648743392994495025892743227707065651278860144655532210609713732232519216236732058189901405819928625151"), 2822), 18 -> (BigInt("8594123736496313496215243585513753866173917756339138023242790993799143077468908747025676898157322660888209239628429705106158772618391485761867307575055881879887007843236153309679259176850082149811120608942930126772455965178613617943790824768262500428179285107292337478589653095593748369320129161143012202644334659381365611965647839328047570404253207360335557075848763749017606372831677458823475533763811224282408798060306377811109943802999623367761681518981641615010215733139704992296204049695664561253919175202719062947924133364015726074621611632882885153211270959465601350475749048749025494235778183330343238449681520877982373048787186811280904834888218301137477216214291569848643865196268725156719908820332647479927803578620808762350128414292896941674603141149625653871180627317886290890307546956105400576394365917021941595233873124856775471375591568834140559356808778800775688663884181814891493495041661687064243888301895600080012877638556451015475230467142116289390326435518322591915795802958441101216962712175190783800791462012821977417342707005963432586671129802894702592607206346065577006819256620129839056832604350309114832013390726030924088795942274574122062227044335070493279751579954005402264613555156737162790426307245151404452440575270926927264972055571017851222159522638135768237322075162630033935569882769639770528918264288380636030071450210203246858438293524809843209134644603546799999033400861314269539257247430375223740874957804704480335234134349373784582930737158688097350322164056855116501334422768267808145522624756684369813529263997799866859379358626542404882147256733874623484436394518714779370194030779289041225669745864859875578541878679781071517860533368652319440643757224546596507929799574476501647995620244569258423574370336222938412403354704080061524362576731385354683669589802394457889627158392259455309318840693302032151398968500499359769926970137829184692273537701267227400807330219857253719327405170688001"), 6441), 20 -> (BigInt("3283954664611874005446162933803219171008150633050418240228538139697181857243525205409712609406421514098400944511471082839361954215120812468810336101791158317230141602009906035843403947200469582928613489898789579257553359572898041286044760468293036089001702895793427729980670404149119705702737505797010113667177266705884519822198251319532933487963972514586839138757701762159099241976168857864599990162450622366797353964241139463192668073659005216480497381152800979261282863401281151855073098769082024569448367308627917336023201555013962269865338512938925886998146284305016390061375521249837445331964020255437015867067426838176782941208127140396412142741449944060801939276423986743735486429436003961799401292084746639669688403945591775651868208488068009523079006794879762354195035498195759168579534723766977151819352334414853958439247759153581891014316684990626536001761672676410610706243085040598298179050293621108040568110988008651675683472763684654912468487456289221223409970730411611629296636205189094396836087381782248601629377329465721594469421132754269660804035012421930014819481589684401734072690615592770831471813750004178837343141228453039498440146345703358216801293371199878450363802397346451932528339189338711683377367721060902049367553508715591096098373353138117503633201574539026887274474346660912179135940338976851974070988199429239847349740177661202781801883506529516938931384452384741003413561488502205603184567203680981581951503419744719376659729989706612273665466858777833351020951896236257650114629644958700915769129586692144374708854922471513998104623018871116941908805997992727117768127294580645814928768469144164422200516267264224461528473496616087362116407493245365282983466227243003878533297282338755134391488212832323512611747657479436652469172835279788510023177721028828088283554221255507087835852035229971362846752012319095768478673498981407546227461875203376031900514928692188639762678213658501610474784854597207059823076402940142460123728802198822753842312255855393128472497072390731580154111052446232360096765563125459996734706201524851588672407634976105661405056651921933765120050714567444831412730193968888557732142076509494405925817418677659920981904970648340666791034408866596117957728953960529097306196081801421957541938432200224754795488958810501987540860685332948884029899720435668191150002092822251500703632814445791368944782296395808186979197454542111917759020695329463678055767186908053203572026499048723841868264314553168444420260828779784244193960497550417490537640725819320076490490163471385706160053563779894030425964682685626833379518879055258892749535294794899537826674839643641873206674845555753122090926254481482653331467974339833337160362585298483809539810929025632615102772013519916849901544548547880364687118311388469942504674937418681767337444516649083400554789384410478055388209615061957544919422409925471803476393129454585068260137170216702935175460728725725597094244343875433823242211421703309529837351717989264968313466950766764040900777554946025034217791459695575184330530203114265881779779822658530287754365436516070605373660718160783731024104267485935222520677287941112140634485368013628998952542925183810314501610633142415009273586083808901219833366238979214035130912707478134388169183247361704750260850752657479249822519435800480836829632151962192197318794782855246249494342772537370135620909839092151415055320854541010118347353206726542011110567501008969217202202667460446364760845499585766416225125115537539994802594386115383049946026824129083989579424324259150341279493363170275791945042349528045665976078783001648301606437146127680636596951811796358328697336432710107860384428359983152416535213448851000615906739368814429660800931117512405951772831540525988201303224408116818212574995588090365658578991090702480796524404165578301199040223101784849781448545347168600588168092867917818814181178765645928276372254657451121283971248572621018810535998252777541058683282846203514742807950013910966968232999630750284220465933650772887277443810563372353134036465044111002956796048262760908718544615379825557121645702783792884632895577990950181266251645263789680041006353156127356207309024101312147842861267851173217153893193296142606708402471411002310365844199262342568099397420520274845997896573404479343408990441553737930498793350127991751025895563255955264552878549691606225494911960703245381705400321"), 14482))
    val aL = Map(3 -> (-1, 7))//, 12 -> (BigInt("-24202565025804503446880919280495496962775723756474832273553510459075370332791703697528494514667628460606935348513162892614621202977427470434276838399"), 506), 14 -> (BigInt("8055950969425871854988082795947895330779485676626032290798121656100833897983551251801751126335608881400502956825308337022985385584882278326606750828140423456986978551473386237663956726996064464695407192108442887881777403078090445463546445803443850980460235849014921135646899176759352620618013366018522381977070349981251432907288431902041656460891466170077185"), 1207), 16 -> (BigInt("42978544614474211265853516903017842057072080509319331510163923773972351620217283936648876851839580879700412216522111873657830881956469084998901178216178766992444744198138411354037572330692543713156934516055806207129185528865856532965015708760233897119052234244667919660306149986210434654654820323497224702506463228267893327707166083255049943075421916012495200477099158166150237223653814843443867704909244224286476033517876372573521382996808297070502228630868627000438172461562822826375561755512337219472797146055549559161968960092231906497261308500228151907138722428513784378687740952082023591846003119789356107789133539823773905296745319957282560801089734156472820020750105749885961369693511394757509487690460506587587540346944460780035994611102982562494437662990985308349471367801416239394884010729513819751211887627546841773570836386748809217"), 2822), 18 -> (BigInt("-24679598937459762874952265886380204142821615491130974843338027979139574717460781811809261321675968148095598424572358869694366699077457066359006839073487823345100591314541349474191800112362505563152480288168996416272325008704542149039715353787484550286796602458103900784203760451352377450401318225068100284248098658518583269136310257288225769012287618859031571829948002012499791869017952512784656324363588215172321461233893736470103679402475745535970990426348608726965558409779230970641392909728169731600699080608172632662918450333919570709067892950913949283403860974598787513667135049320751875974948989393785703430247861175464431506160272063720449574127130380202881955141000777020875523884974779230198825342932734776470643475459583777150958313241569462784707521442120796419809111996340813960851859996835594226777008422180879266337488970870077249772844147176496193676097389698516188359113252450546868903410530502087519788630526560443201735660350885290581819976198279306709105375418796812913498653653101454949746256169773926895499148391520393877831307153609641928952790973843152544279488520440548503010647802997557546780937676436295842059800282631323593882438484730555468391400787220957301381421230345997528023512025504922643229438968726793415557560723401021892480437424028930305053793085112418240799344136191042963598089882568272778622170119842896665747604257761436449375158698412022125735330056168677429411885671564072625968917070077047021933888428550930355859209478865284092979924441142668332308723232855399597327375931729737981370278922209600734953446961171447391225798866248861458924196935674068221792564509349391892801352482812789232652760566742472721149870248027707386796933503250446971661444853014321555150176809588839909327507138451785624236505714087169250306059054263809843065239707506422279044710889049931372917628938608788334090257288975731300371556770805502970884715322857296020933091622243324804085564617142405292970147839"), 6441), 20 -> (BigInt("-1580998815690915381885854013795605163989862422144072627206840568933849312347852961992676656728992035463173738131876766965089805150931166408822799909000911307817779550048602947608425748763344873369029332494815766725464139109332094070622121101931504013056256186385269164793191629926530629661208236164729406519445263198914841501398805905862293279188222795958251159038753647825139439291813541628340522221647640371542912210111614892414495051469154588921719844892403775549038679391939929685231482024930448782036206678864924589663804437824595201001844371298761506377478051992621194846835556014448288461483313074218716601402131442170630018719337569568902707735687392950996165987778589208538903397278065279693837922776358002999763993240871569286500087550369980320771116351951434048013570827883677046929590418364701007043993682094040000048710978093244875129575378968525642928873362551672190974226244806809113085635278862043419429806758542245740936956122191454979217888447357263429273765293010190049622208518420501087053492704361521291356373023649438650074367627430049587112343632486403070710755556712350327113042187953903354997783254442026621960841908657705190934783088671020944698992761707482121392998246485486854468347364021295197370287530706656455552199030671263561079642447533177515432708022804430906713838871755392447599897998318293774291687385347269173842427016753652089606748527891710024724698149856666603667303669423679934922408044503133850863966528508522940811265346653921991608018022997648774395107678206288757163587567919448336027491313442562859333815731545961160717934575899602310486810369039363348713615381183925894791398677803862116746458250178658764564073947410340904923530475036332900157775812281324354814582237338166368502306787931440191419372308546746365906028950534166764613028668594976316478196800474188163609706658689139766050477270346351234379211142564099078776683667940021515005796014106031338043024077024841695320970276669605616934984160607555147211364799607062621435214226388950389981447126601956476254408703988312267557959712398427468447869886431405449023150152050030848187996152791412177719716006901105403089748042110456913254949803470942757033637389183460473949022565785195950737025681464540646931993561486239890420909517000309568804948444815874789440884363029388599165395174055318724106019156641464433040427958299956560703992002228643828602079840631688773122922128938938672063611466968373411868966469552624107557881930605004553924766336673299722104553295367612318686048096776623285036580444466714084855227281231163176124941207398575899769998045380033685533597974068250837828603798473133408464419436401673421461361023051217727666910049966458571017111713231235693472426885883060193835526439627928866327508157370802880046500012466717574980563621924891494693846243159974474777715075374516386380609741032606779593434832328446582841625063371594015168070431615771367405066519305386071931969533451348127770482640064384842755279084503093139191116453893407548196729708304915526311329689320020300637032705510002453773970750288707985981596456337635132375967967432201653670616064854732012327896285385016155245915251880673052220888565587843509270950828826581320045740118280442059193594542811724857223958304116523143487348017824502916107942964124136855395444148053796654435853405089871758246686998850110426218588077150494453001660429494142691840418622160488888450039896287400044665729895406428933135106255072340022980303840867868872116093981788668259926637035672894271645133920138047411026753498677859812071364363390140690116293354475011531414277213889526711791261657047978896694109092544479346823370871030258910462902939331801356200822943055532530344356134337510497050309254554536424485731394536884133862578005429606864314002072845992516792029516666993347535139569013471664663030674637700926298304919078269761993175749555957810182779587437762897309026871735026654179344439504528431187548493199974262533373996307256426710130416310933269573649574412638314115843318289784022118320650269301743348578733476975630342908003258785240538209214824543613077939486619405593069141645300519305390111196930736966674426288762866659220143193453676893391105813114639326333068639140961382321374789587865832539041199643917200804407125288867108900305083621428450924702582288279841292230654924268292638345623874999785111191071782712166533573862389329914055983469644480511"), 14482))

    scope {
        for (GQ <- LGQ) {
            val before = states.last
            states += createConstant(arrayN.sort)
            val after = states.last
            GQ._1 match {
                case "x" => !! (X(GQ._2.apply(0), before, after))
                case "y" => !! (Y(GQ._2.apply(0), before, after))
                case "z" => !! (Z(GQ._2.apply(0), before, after))
                case "h" => !! (H(GQ._2.apply(0), before, after))
                case "s" => !! (S(GQ._2.apply(0), before, after))
                case "t" => !! (T(GQ._2.apply(0), before, after))
                case "cx" => !! (CX(GQ._2.apply(0), GQ._2.apply(1), before, after))
                case "cz" => !! (CZ(GQ._2.apply(0), GQ._2.apply(1), before, after))
                case "ccx" => !! (CCX(GQ._2.apply(0), GQ._2.apply(1), GQ._2.apply(2), before, after))
                case _ => throw new RuntimeException("Unimplemented Gate!!!")
            }
        }
        //////////////////////////
        !! (states.head === arrayN.store(List(arrayN.const(complex(0, 0, 0, 0, 0)))
                                       ++ nFalse(Q) ++ List(complex(1, 0, 0, 0, 0)) : _*))
        //////////////////////////
        // ?? (states.last === arrayN.store(List(arrayN.const(complex(0, 0, 0, 0, countH)))
        //           ++ List(False, True, True) ++ List(complex(-1<<(countH/2), 0, 0, 0, countH)) : _*))
        // ?? (states.last === arrayN.store(List(arrayN.store(List(arrayN.store(List(arrayN.store(List(arrayN.store(List(arrayN.store(List(arrayN.store(List(arrayN.store(List(arrayN.const(complex(0, 0, 0, 0, 17)))
        //                               ++ List(False, False, False, False, False, True) ++ List(complex(-32, 0, 0, 0, 17)) : _*))
        //                               ++ List(False, False, False, True, False, True) ++ List(complex(-32, 0, 0, 0, 17)) : _*))
        //                               ++ List(False, True, False, False, False, True) ++ List(complex(352, 0, 0, 0, 17)) : _*))
        //                               ++ List(False, True, False, True, False, True) ++ List(complex(-32, 0, 0, 0, 17)) : _*))
        //                               ++ List(True, False, False, False, False, True) ++ List(complex(-32, 0, 0, 0, 17)) : _*))
        //                               ++ List(True, False, False, True, False, True) ++ List(complex(-32, 0, 0, 0, 17)) : _*))
        //                               ++ List(True, True, False, False, False, True) ++ List(complex(-32, 0, 0, 0, 17)) : _*))
        //                               ++ List(True, True, False, True, False, True) ++ List(complex(-32, 0, 0, 0, 17)) : _*))
        // Build specification
        val n = N / 2
        val nonzero_indices = ArrayBuffer[Int]()
        for (ii <- 0 until (1 << n)) {
            var i = ii
            var t = 0
            for (_ <- 0 until n) {
                t <<= 1
                t += i & 1
                i >>= 1
            }
            var a = t & 1
            a <<= 1
            t >>= 1
            for (_ <- 2 until n+1) {
                a += t & 1
                a <<= 2
                t >>= 1
            }
            a += 1
            nonzero_indices += a
        }
        /////////////////////////////
        var s = 0
        for (i <- 0 until n) {
            s <<= 1
            s += i % 2
        }
        var ini = arrayN.const(complex(0, 0, 0, 0, countH))
        var aH_n = 0 //BigInt(0)
        if (aH(n)._2 <= countH) {
            aH_n = aH(n)._1/*.asInstanceOf[BigInt]*/ << ((countH - aH(n)._2) / 2)
        } else {
            aH_n = aH(n)._1/*.asInstanceOf[BigInt]*/ >> ((aH(n)._2 - countH) / 2)
        }
        var aL_n = 0 //BigInt(0)
        if (aL(n)._2 <= countH) {
            aL_n = aL(n)._1/*.asInstanceOf[BigInt]*/ << ((countH - aL(n)._2) / 2)
        } else {
            aL_n = aL(n)._1/*.asInstanceOf[BigInt]*/ >> ((aL(n)._2 - countH) / 2)
        }
        for ((num, i) <- nonzero_indices.zipWithIndex) {
            if (i == s) {
                // println('*', num.toBinaryString.reverse.padTo(N, '0').reverse.map{ case '1' => True case _ => False }.toList)
                ini = arrayN.store(List(ini) ++ num.toBinaryString.reverse.padTo(N, '0').reverse.map{ case '1' => True case _ => False }.toList ++ List(complex(aH_n, 0, 0, 0, countH)) : _*)
            } else {
                // println(i, num.toBinaryString.reverse.padTo(N, '0').reverse.map{ case '1' => True case _ => False }.toList)
                ini = arrayN.store(List(ini) ++ num.toBinaryString.reverse.padTo(N, '0').reverse.map{ case '1' => True case _ => False }.toList ++ List(complex(aL_n, 0, 0, 0, countH)) : _*)
            }
        }
        ?? (states.last === ini)
        println(???) // valid
        // println(countGate)
        println(evalToTerm(states.last))
    }
  }
}

object GroverSingleBug {
    def main(args: Array[String]): Unit = {
        val gateCalls = QASMParser.extractGateCallsFromFile(args(0))
        new GroverSingleBugClass(gateCalls._1, gateCalls._2).main(args)
    }
}
