
Input Clauses (after conversion)
conjToClause((every_one_but(convALL0, convEX0)), false)
	predLiterals: every_one_but(convALL0, convEX0)
	arithLiters: true
	negLiterals: true
	ALL EX (every_one_but(_1, _0)) => List(List(FunEquation(every_one_but(convALL0, convEX0))))
conjToClause((! (!richer(convALL0, CONSTANT_1) & !hates(CONSTANT_2, convALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(convALL0, CONSTANT_1) & !hates(CONSTANT_2, convALL0))
subConjToClause((!richer(convALL0, CONSTANT_1) & !hates(CONSTANT_2, convALL0)), true)
	predLiterals: List(Literal(richer(convALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, convALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
	ALL (! (!richer(_0, CONSTANT_1) & !hates(CONSTANT_2, _0))) => List(List(Literal(richer(convALL0, CONSTANT_1))), List(Literal(hates(CONSTANT_2, convALL0))))
conjToClause((! (hates(CONSTANT_1, convALL0) & !hates(CONSTANT_2, convALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, convALL0) & !hates(CONSTANT_2, convALL0))
subConjToClause((hates(CONSTANT_1, convALL0) & !hates(CONSTANT_2, convALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, convALL0)), Literal(hates(CONSTANT_2, convALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
	ALL (! (hates(CONSTANT_1, _0) & !hates(CONSTANT_2, _0))) => List(List(Literal(!hates(CONSTANT_1, convALL0))), List(Literal(hates(CONSTANT_2, convALL0))))
conjToClause((! (hates(CONSTANT_3, convALL0) & hates(CONSTANT_1, convALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, convALL0) & hates(CONSTANT_1, convALL0))
subConjToClause((hates(CONSTANT_3, convALL0) & hates(CONSTANT_1, convALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, convALL0)), Literal(!hates(CONSTANT_1, convALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
	ALL (! (hates(CONSTANT_3, _0) & hates(CONSTANT_1, _0))) => List(List(Literal(!hates(CONSTANT_3, convALL0))), List(Literal(!hates(CONSTANT_1, convALL0))))
conjToClause((! (convALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, convALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (convALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, convALL0))
subConjToClause((convALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, convALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, convALL0)))
	eqLiterals: List(Equation(convALL0,CONSTANT_2))
	conj.negatedConjs: true
	ALL (! (_0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, _0))) => List(List(Literal(hates(CONSTANT_1, convALL0))), List(Equation(convALL0,CONSTANT_2)))
conjToClause((! (convALL0 + -1*CONSTANT_3 != 0 & convALL0 + -1*CONSTANT_2 != 0 & convALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(convALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (convALL0 + -1*CONSTANT_3 != 0 & convALL0 + -1*CONSTANT_2 != 0 & convALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(convALL0))
subConjToClause((convALL0 + -1*CONSTANT_3 != 0 & convALL0 + -1*CONSTANT_2 != 0 & convALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(convALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(convALL0)))
	eqLiterals: List(Equation(convALL0,CONSTANT_3), Equation(convALL0,CONSTANT_2), Equation(convALL0,CONSTANT_1))
	conj.negatedConjs: true
	ALL (! (_0 + -1*CONSTANT_3 != 0 & _0 + -1*CONSTANT_2 != 0 & _0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(_0))) => List(List(Literal(!lives_at_dreadsbury(convALL0))), List(Equation(convALL0,CONSTANT_3)), List(Equation(convALL0,CONSTANT_2)), List(Equation(convALL0,CONSTANT_1)))
conjToClause((! (killed(convALL0, convALL1) & !hates(convALL0, convALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(convALL0, convALL1) & !hates(convALL0, convALL1))
subConjToClause((killed(convALL0, convALL1) & !hates(convALL0, convALL1)), true)
	predLiterals: List(Literal(!killed(convALL0, convALL1)), Literal(hates(convALL0, convALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
	ALL ALL (! (killed(_0, _1) & !hates(_0, _1))) => List(List(Literal(!killed(convALL0, convALL1))), List(Literal(hates(convALL0, convALL1))))
conjToClause((! (richer(convALL0, convALL1) & killed(convALL0, convALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (richer(convALL0, convALL1) & killed(convALL0, convALL1))
subConjToClause((richer(convALL0, convALL1) & killed(convALL0, convALL1)), true)
	predLiterals: List(Literal(!richer(convALL0, convALL1)), Literal(!killed(convALL0, convALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
	ALL ALL (! (richer(_0, _1) & killed(_0, _1))) => List(List(Literal(!richer(convALL0, convALL1))), List(Literal(!killed(convALL0, convALL1))))

conjToClause((! (convALL2 + -1*convALL1 != 0 & every_one_but(convALL0, convALL2) & every_one_but(convALL0, convALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (convALL2 + -1*convALL1 != 0 & every_one_but(convALL0, convALL2) & every_one_but(convALL0, convALL1))
subConjToClause((convALL2 + -1*convALL1 != 0 & every_one_but(convALL0, convALL2) & every_one_but(convALL0, convALL1)), true)
	predLiterals: List(FunEquation(every_one_but(convALL0, convALL2)), FunEquation(every_one_but(convALL0, convALL1)))
	eqLiterals: List(Equation(convALL2,convALL1))
	conj.negatedConjs: true
	ALL ALL ALL (! (_1 + -1*_2 != 0 & every_one_but(_0, _1) & every_one_but(_0, _2))) => List(List(FunEquation(every_one_but(convALL0, convALL2))), List(FunEquation(every_one_but(convALL0, convALL1))), List(Equation(convALL2,convALL1)))
conjToClause((!killed(CONSTANT_1, CONSTANT_1)), false)
	predLiterals: !killed(CONSTANT_1, CONSTANT_1)
	arithLiters: true
	negLiterals: true
	(!killed(CONSTANT_1, CONSTANT_1)) => List(List(Literal(!killed(CONSTANT_1, CONSTANT_1))))
conjToClause((lives_at_dreadsbury(CONSTANT_0)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_0)
	arithLiters: true
	negLiterals: true
	(lives_at_dreadsbury(CONSTANT_0)) => List(List(Literal(lives_at_dreadsbury(CONSTANT_0))))
conjToClause((lives_at_dreadsbury(CONSTANT_1)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_1)
	arithLiters: true
	negLiterals: true
	(lives_at_dreadsbury(CONSTANT_1)) => List(List(Literal(lives_at_dreadsbury(CONSTANT_1))))
conjToClause((lives_at_dreadsbury(CONSTANT_2)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_2)
	arithLiters: true
	negLiterals: true
	(lives_at_dreadsbury(CONSTANT_2)) => List(List(Literal(lives_at_dreadsbury(CONSTANT_2))))
conjToClause((lives_at_dreadsbury(CONSTANT_3)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_3)
	arithLiters: true
	negLiterals: true
	(lives_at_dreadsbury(CONSTANT_3)) => List(List(Literal(lives_at_dreadsbury(CONSTANT_3))))
conjToClause((killed(CONSTANT_0, CONSTANT_1)), false)
	predLiterals: killed(CONSTANT_0, CONSTANT_1)
	arithLiters: true
	negLiterals: true
	(killed(CONSTANT_0, CONSTANT_1)) => List(List(Literal(killed(CONSTANT_0, CONSTANT_1))))
conjToClause((CONSTANT_2 + -1*CONSTANT_1 != 0), false)
	predLiterals: true
	arithLiters: CONSTANT_2 + -1*CONSTANT_1 != 0
	negLiterals: true
	(CONSTANT_2 + -1*CONSTANT_1 != 0) => List(List(NegEquation(CONSTANT_2,CONSTANT_1)))
Base Order: List((CONSTANT_0,false), (CONSTANT_1,false), (CONSTANT_2,false), (CONSTANT_3,false), (MIN,false))
//-----------------------------
||  TRYING maxDepth: 8
||  TRYING maxWidth: 8
||
||


Trying with inital clause: (every_one_but(baseALL0, baseEX0))
conjToClause((every_one_but(baseALL0, baseEX0)), false)
	predLiterals: every_one_but(baseALL0, baseEX0)
	arithLiters: true
	negLiterals: true
//-------------------------
|| Starting recursive iteration 0
|| Branches: 
||	(0) FunEquation(every_one_but(baseALL0, baseEX0))
|| Extending branch (0): 
||	List(FunEquation(every_one_but(baseALL0, baseEX0)))
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))
subConjToClause((killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!killed(clauseWidthALL0, clauseWidthALL1)), Literal(hates(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))
subConjToClause((richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!richer(clauseWidthALL0, clauseWidthALL1)), Literal(!killed(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))
subConjToClause((every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(clauseWidthALL1, clauseWidthALL0)), FunEquation(every_one_but(clauseWidthALL1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1))
subConjToClause((clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(FunEquation(every_one_but(clauseWidthALL0, clauseWidthALL2)), FunEquation(every_one_but(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List(Equation(clauseWidthALL2,clauseWidthALL1))
	conj.negatedConjs: true
conjToClause((!killed(CONSTANT_1, CONSTANT_1)), false)
	predLiterals: !killed(CONSTANT_1, CONSTANT_1)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_0)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_0)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_1)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_1)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_2)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_2)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_3)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_3)
	arithLiters: true
	negLiterals: true
conjToClause((killed(CONSTANT_0, CONSTANT_1)), false)
	predLiterals: killed(CONSTANT_0, CONSTANT_1)
	arithLiters: true
	negLiterals: true
conjToClause((CONSTANT_2 + -1*CONSTANT_1 != 0), false)
	predLiterals: true
	arithLiters: CONSTANT_2 + -1*CONSTANT_1 != 0
	negLiterals: true
|| MaxStep: 30
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(branch_0ALL0, branch_0EX0)), false)
	predLiterals: every_one_but(branch_0ALL0, branch_0EX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(branch_0ALL0, CONSTANT_1) & !hates(CONSTANT_2, branch_0ALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(branch_0ALL0, CONSTANT_1) & !hates(CONSTANT_2, branch_0ALL0))
subConjToClause((!richer(branch_0ALL0, CONSTANT_1) & !hates(CONSTANT_2, branch_0ALL0)), true)
	predLiterals: List(Literal(richer(branch_0ALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, branch_0ALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(branch_0ALL0, CONSTANT_1) & !hates(CONSTANT_2, branch_0ALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(branch_0ALL0, CONSTANT_1) & !hates(CONSTANT_2, branch_0ALL0))
subConjToClause((!richer(branch_0ALL0, CONSTANT_1) & !hates(CONSTANT_2, branch_0ALL0)), true)
	predLiterals: List(Literal(richer(branch_0ALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, branch_0ALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, branch_0ALL0) & !hates(CONSTANT_2, branch_0ALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, branch_0ALL0) & !hates(CONSTANT_2, branch_0ALL0))
subConjToClause((hates(CONSTANT_1, branch_0ALL0) & !hates(CONSTANT_2, branch_0ALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, branch_0ALL0)), Literal(hates(CONSTANT_2, branch_0ALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, branch_0ALL0) & !hates(CONSTANT_2, branch_0ALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, branch_0ALL0) & !hates(CONSTANT_2, branch_0ALL0))
subConjToClause((hates(CONSTANT_1, branch_0ALL0) & !hates(CONSTANT_2, branch_0ALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, branch_0ALL0)), Literal(hates(CONSTANT_2, branch_0ALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, branch_0ALL0) & hates(CONSTANT_1, branch_0ALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, branch_0ALL0) & hates(CONSTANT_1, branch_0ALL0))
subConjToClause((hates(CONSTANT_3, branch_0ALL0) & hates(CONSTANT_1, branch_0ALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, branch_0ALL0)), Literal(!hates(CONSTANT_1, branch_0ALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, branch_0ALL0) & hates(CONSTANT_1, branch_0ALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, branch_0ALL0) & hates(CONSTANT_1, branch_0ALL0))
subConjToClause((hates(CONSTANT_3, branch_0ALL0) & hates(CONSTANT_1, branch_0ALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, branch_0ALL0)), Literal(!hates(CONSTANT_1, branch_0ALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (branch_0ALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, branch_0ALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (branch_0ALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, branch_0ALL0))
subConjToClause((branch_0ALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, branch_0ALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, branch_0ALL0)))
	eqLiterals: List(Equation(branch_0ALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (branch_0ALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, branch_0ALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (branch_0ALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, branch_0ALL0))
subConjToClause((branch_0ALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, branch_0ALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, branch_0ALL0)))
	eqLiterals: List(Equation(branch_0ALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (branch_0ALL0 + -1*CONSTANT_3 != 0 & branch_0ALL0 + -1*CONSTANT_2 != 0 & branch_0ALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(branch_0ALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (branch_0ALL0 + -1*CONSTANT_3 != 0 & branch_0ALL0 + -1*CONSTANT_2 != 0 & branch_0ALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(branch_0ALL0))
subConjToClause((branch_0ALL0 + -1*CONSTANT_3 != 0 & branch_0ALL0 + -1*CONSTANT_2 != 0 & branch_0ALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(branch_0ALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(branch_0ALL0)))
	eqLiterals: List(Equation(branch_0ALL0,CONSTANT_3), Equation(branch_0ALL0,CONSTANT_2), Equation(branch_0ALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (branch_0ALL0 + -1*CONSTANT_3 != 0 & branch_0ALL0 + -1*CONSTANT_2 != 0 & branch_0ALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(branch_0ALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (branch_0ALL0 + -1*CONSTANT_3 != 0 & branch_0ALL0 + -1*CONSTANT_2 != 0 & branch_0ALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(branch_0ALL0))
subConjToClause((branch_0ALL0 + -1*CONSTANT_3 != 0 & branch_0ALL0 + -1*CONSTANT_2 != 0 & branch_0ALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(branch_0ALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(branch_0ALL0)))
	eqLiterals: List(Equation(branch_0ALL0,CONSTANT_3), Equation(branch_0ALL0,CONSTANT_2), Equation(branch_0ALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (branch_0ALL0 + -1*CONSTANT_3 != 0 & branch_0ALL0 + -1*CONSTANT_2 != 0 & branch_0ALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(branch_0ALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (branch_0ALL0 + -1*CONSTANT_3 != 0 & branch_0ALL0 + -1*CONSTANT_2 != 0 & branch_0ALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(branch_0ALL0))
subConjToClause((branch_0ALL0 + -1*CONSTANT_3 != 0 & branch_0ALL0 + -1*CONSTANT_2 != 0 & branch_0ALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(branch_0ALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(branch_0ALL0)))
	eqLiterals: List(Equation(branch_0ALL0,CONSTANT_3), Equation(branch_0ALL0,CONSTANT_2), Equation(branch_0ALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (branch_0ALL0 + -1*CONSTANT_3 != 0 & branch_0ALL0 + -1*CONSTANT_2 != 0 & branch_0ALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(branch_0ALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (branch_0ALL0 + -1*CONSTANT_3 != 0 & branch_0ALL0 + -1*CONSTANT_2 != 0 & branch_0ALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(branch_0ALL0))
subConjToClause((branch_0ALL0 + -1*CONSTANT_3 != 0 & branch_0ALL0 + -1*CONSTANT_2 != 0 & branch_0ALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(branch_0ALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(branch_0ALL0)))
	eqLiterals: List(Equation(branch_0ALL0,CONSTANT_3), Equation(branch_0ALL0,CONSTANT_2), Equation(branch_0ALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))
subConjToClause((killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!killed(clauseWidthALL0, clauseWidthALL1)), Literal(hates(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (killed(branch_0ALL0, branch_0ALL1) & !hates(branch_0ALL0, branch_0ALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(branch_0ALL0, branch_0ALL1) & !hates(branch_0ALL0, branch_0ALL1))
subConjToClause((killed(branch_0ALL0, branch_0ALL1) & !hates(branch_0ALL0, branch_0ALL1)), true)
	predLiterals: List(Literal(!killed(branch_0ALL0, branch_0ALL1)), Literal(hates(branch_0ALL0, branch_0ALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))
subConjToClause((killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!killed(clauseWidthALL0, clauseWidthALL1)), Literal(hates(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (killed(branch_0ALL0, branch_0ALL1) & !hates(branch_0ALL0, branch_0ALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(branch_0ALL0, branch_0ALL1) & !hates(branch_0ALL0, branch_0ALL1))
subConjToClause((killed(branch_0ALL0, branch_0ALL1) & !hates(branch_0ALL0, branch_0ALL1)), true)
	predLiterals: List(Literal(!killed(branch_0ALL0, branch_0ALL1)), Literal(hates(branch_0ALL0, branch_0ALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))
subConjToClause((killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!killed(clauseWidthALL0, clauseWidthALL1)), Literal(hates(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))
subConjToClause((killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!killed(clauseWidthALL0, clauseWidthALL1)), Literal(hates(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))
subConjToClause((richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!richer(clauseWidthALL0, clauseWidthALL1)), Literal(!killed(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (richer(branch_0ALL0, branch_0ALL1) & killed(branch_0ALL0, branch_0ALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (richer(branch_0ALL0, branch_0ALL1) & killed(branch_0ALL0, branch_0ALL1))
subConjToClause((richer(branch_0ALL0, branch_0ALL1) & killed(branch_0ALL0, branch_0ALL1)), true)
	predLiterals: List(Literal(!richer(branch_0ALL0, branch_0ALL1)), Literal(!killed(branch_0ALL0, branch_0ALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))
subConjToClause((killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!killed(clauseWidthALL0, clauseWidthALL1)), Literal(hates(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))
subConjToClause((killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!killed(clauseWidthALL0, clauseWidthALL1)), Literal(hates(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))
subConjToClause((richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!richer(clauseWidthALL0, clauseWidthALL1)), Literal(!killed(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (richer(branch_0ALL0, branch_0ALL1) & killed(branch_0ALL0, branch_0ALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (richer(branch_0ALL0, branch_0ALL1) & killed(branch_0ALL0, branch_0ALL1))
subConjToClause((richer(branch_0ALL0, branch_0ALL1) & killed(branch_0ALL0, branch_0ALL1)), true)
	predLiterals: List(Literal(!richer(branch_0ALL0, branch_0ALL1)), Literal(!killed(branch_0ALL0, branch_0ALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))
subConjToClause((killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!killed(clauseWidthALL0, clauseWidthALL1)), Literal(hates(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))
subConjToClause((killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!killed(clauseWidthALL0, clauseWidthALL1)), Literal(hates(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))
subConjToClause((richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!richer(clauseWidthALL0, clauseWidthALL1)), Literal(!killed(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))
subConjToClause((richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!richer(clauseWidthALL0, clauseWidthALL1)), Literal(!killed(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))
subConjToClause((every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(clauseWidthALL1, clauseWidthALL0)), FunEquation(every_one_but(clauseWidthALL1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (every_one_but(branch_0ALL1, branch_0ALL0) & hates(branch_0ALL1, branch_0ALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (every_one_but(branch_0ALL1, branch_0ALL0) & hates(branch_0ALL1, branch_0ALL0))
subConjToClause((every_one_but(branch_0ALL1, branch_0ALL0) & hates(branch_0ALL1, branch_0ALL0)), true)
	predLiterals: List(Literal(!hates(branch_0ALL1, branch_0ALL0)), FunEquation(every_one_but(branch_0ALL1, branch_0ALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))
subConjToClause((killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!killed(clauseWidthALL0, clauseWidthALL1)), Literal(hates(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))
subConjToClause((killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!killed(clauseWidthALL0, clauseWidthALL1)), Literal(hates(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))
subConjToClause((richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!richer(clauseWidthALL0, clauseWidthALL1)), Literal(!killed(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))
subConjToClause((richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!richer(clauseWidthALL0, clauseWidthALL1)), Literal(!killed(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))
subConjToClause((every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(clauseWidthALL1, clauseWidthALL0)), FunEquation(every_one_but(clauseWidthALL1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (every_one_but(branch_0ALL1, branch_0ALL0) & hates(branch_0ALL1, branch_0ALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (every_one_but(branch_0ALL1, branch_0ALL0) & hates(branch_0ALL1, branch_0ALL0))
subConjToClause((every_one_but(branch_0ALL1, branch_0ALL0) & hates(branch_0ALL1, branch_0ALL0)), true)
	predLiterals: List(Literal(!hates(branch_0ALL1, branch_0ALL0)), FunEquation(every_one_but(branch_0ALL1, branch_0ALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))
subConjToClause((killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!killed(clauseWidthALL0, clauseWidthALL1)), Literal(hates(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))
subConjToClause((killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!killed(clauseWidthALL0, clauseWidthALL1)), Literal(hates(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))
subConjToClause((richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!richer(clauseWidthALL0, clauseWidthALL1)), Literal(!killed(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))
subConjToClause((richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!richer(clauseWidthALL0, clauseWidthALL1)), Literal(!killed(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))
subConjToClause((every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(clauseWidthALL1, clauseWidthALL0)), FunEquation(every_one_but(clauseWidthALL1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))
subConjToClause((every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(clauseWidthALL1, clauseWidthALL0)), FunEquation(every_one_but(clauseWidthALL1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1))
subConjToClause((clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(FunEquation(every_one_but(clauseWidthALL0, clauseWidthALL2)), FunEquation(every_one_but(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List(Equation(clauseWidthALL2,clauseWidthALL1))
	conj.negatedConjs: true
conjToClause((! (branch_0ALL2 + -1*branch_0ALL1 != 0 & every_one_but(branch_0ALL0, branch_0ALL2) & every_one_but(branch_0ALL0, branch_0ALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (branch_0ALL2 + -1*branch_0ALL1 != 0 & every_one_but(branch_0ALL0, branch_0ALL2) & every_one_but(branch_0ALL0, branch_0ALL1))
subConjToClause((branch_0ALL2 + -1*branch_0ALL1 != 0 & every_one_but(branch_0ALL0, branch_0ALL2) & every_one_but(branch_0ALL0, branch_0ALL1)), true)
	predLiterals: List(FunEquation(every_one_but(branch_0ALL0, branch_0ALL2)), FunEquation(every_one_but(branch_0ALL0, branch_0ALL1)))
	eqLiterals: List(Equation(branch_0ALL2,branch_0ALL1))
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))
subConjToClause((killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!killed(clauseWidthALL0, clauseWidthALL1)), Literal(hates(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))
subConjToClause((killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!killed(clauseWidthALL0, clauseWidthALL1)), Literal(hates(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))
subConjToClause((richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!richer(clauseWidthALL0, clauseWidthALL1)), Literal(!killed(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))
subConjToClause((richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!richer(clauseWidthALL0, clauseWidthALL1)), Literal(!killed(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))
subConjToClause((every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(clauseWidthALL1, clauseWidthALL0)), FunEquation(every_one_but(clauseWidthALL1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))
subConjToClause((every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(clauseWidthALL1, clauseWidthALL0)), FunEquation(every_one_but(clauseWidthALL1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1))
subConjToClause((clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(FunEquation(every_one_but(clauseWidthALL0, clauseWidthALL2)), FunEquation(every_one_but(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List(Equation(clauseWidthALL2,clauseWidthALL1))
	conj.negatedConjs: true
conjToClause((! (branch_0ALL2 + -1*branch_0ALL1 != 0 & every_one_but(branch_0ALL0, branch_0ALL2) & every_one_but(branch_0ALL0, branch_0ALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (branch_0ALL2 + -1*branch_0ALL1 != 0 & every_one_but(branch_0ALL0, branch_0ALL2) & every_one_but(branch_0ALL0, branch_0ALL1))
subConjToClause((branch_0ALL2 + -1*branch_0ALL1 != 0 & every_one_but(branch_0ALL0, branch_0ALL2) & every_one_but(branch_0ALL0, branch_0ALL1)), true)
	predLiterals: List(FunEquation(every_one_but(branch_0ALL0, branch_0ALL2)), FunEquation(every_one_but(branch_0ALL0, branch_0ALL1)))
	eqLiterals: List(Equation(branch_0ALL2,branch_0ALL1))
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))
subConjToClause((killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!killed(clauseWidthALL0, clauseWidthALL1)), Literal(hates(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))
subConjToClause((killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!killed(clauseWidthALL0, clauseWidthALL1)), Literal(hates(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))
subConjToClause((richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!richer(clauseWidthALL0, clauseWidthALL1)), Literal(!killed(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))
subConjToClause((richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!richer(clauseWidthALL0, clauseWidthALL1)), Literal(!killed(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))
subConjToClause((every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(clauseWidthALL1, clauseWidthALL0)), FunEquation(every_one_but(clauseWidthALL1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))
subConjToClause((every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(clauseWidthALL1, clauseWidthALL0)), FunEquation(every_one_but(clauseWidthALL1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1))
subConjToClause((clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(FunEquation(every_one_but(clauseWidthALL0, clauseWidthALL2)), FunEquation(every_one_but(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List(Equation(clauseWidthALL2,clauseWidthALL1))
	conj.negatedConjs: true
conjToClause((! (branch_0ALL2 + -1*branch_0ALL1 != 0 & every_one_but(branch_0ALL0, branch_0ALL2) & every_one_but(branch_0ALL0, branch_0ALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (branch_0ALL2 + -1*branch_0ALL1 != 0 & every_one_but(branch_0ALL0, branch_0ALL2) & every_one_but(branch_0ALL0, branch_0ALL1))
subConjToClause((branch_0ALL2 + -1*branch_0ALL1 != 0 & every_one_but(branch_0ALL0, branch_0ALL2) & every_one_but(branch_0ALL0, branch_0ALL1)), true)
	predLiterals: List(FunEquation(every_one_but(branch_0ALL0, branch_0ALL2)), FunEquation(every_one_but(branch_0ALL0, branch_0ALL1)))
	eqLiterals: List(Equation(branch_0ALL2,branch_0ALL1))
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))
subConjToClause((killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!killed(clauseWidthALL0, clauseWidthALL1)), Literal(hates(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))
subConjToClause((killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!killed(clauseWidthALL0, clauseWidthALL1)), Literal(hates(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))
subConjToClause((richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!richer(clauseWidthALL0, clauseWidthALL1)), Literal(!killed(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))
subConjToClause((richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!richer(clauseWidthALL0, clauseWidthALL1)), Literal(!killed(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))
subConjToClause((every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(clauseWidthALL1, clauseWidthALL0)), FunEquation(every_one_but(clauseWidthALL1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))
subConjToClause((every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(clauseWidthALL1, clauseWidthALL0)), FunEquation(every_one_but(clauseWidthALL1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1))
subConjToClause((clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(FunEquation(every_one_but(clauseWidthALL0, clauseWidthALL2)), FunEquation(every_one_but(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List(Equation(clauseWidthALL2,clauseWidthALL1))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1))
subConjToClause((clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(FunEquation(every_one_but(clauseWidthALL0, clauseWidthALL2)), FunEquation(every_one_but(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List(Equation(clauseWidthALL2,clauseWidthALL1))
	conj.negatedConjs: true
conjToClause((!killed(CONSTANT_1, CONSTANT_1)), false)
	predLiterals: !killed(CONSTANT_1, CONSTANT_1)
	arithLiters: true
	negLiterals: true
conjToClause((!killed(CONSTANT_1, CONSTANT_1)), false)
	predLiterals: !killed(CONSTANT_1, CONSTANT_1)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))
subConjToClause((killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!killed(clauseWidthALL0, clauseWidthALL1)), Literal(hates(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))
subConjToClause((killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!killed(clauseWidthALL0, clauseWidthALL1)), Literal(hates(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))
subConjToClause((richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!richer(clauseWidthALL0, clauseWidthALL1)), Literal(!killed(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))
subConjToClause((richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!richer(clauseWidthALL0, clauseWidthALL1)), Literal(!killed(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))
subConjToClause((every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(clauseWidthALL1, clauseWidthALL0)), FunEquation(every_one_but(clauseWidthALL1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))
subConjToClause((every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(clauseWidthALL1, clauseWidthALL0)), FunEquation(every_one_but(clauseWidthALL1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1))
subConjToClause((clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(FunEquation(every_one_but(clauseWidthALL0, clauseWidthALL2)), FunEquation(every_one_but(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List(Equation(clauseWidthALL2,clauseWidthALL1))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1))
subConjToClause((clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(FunEquation(every_one_but(clauseWidthALL0, clauseWidthALL2)), FunEquation(every_one_but(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List(Equation(clauseWidthALL2,clauseWidthALL1))
	conj.negatedConjs: true
conjToClause((!killed(CONSTANT_1, CONSTANT_1)), false)
	predLiterals: !killed(CONSTANT_1, CONSTANT_1)
	arithLiters: true
	negLiterals: true
conjToClause((!killed(CONSTANT_1, CONSTANT_1)), false)
	predLiterals: !killed(CONSTANT_1, CONSTANT_1)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_0)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_0)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_0)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))
subConjToClause((killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!killed(clauseWidthALL0, clauseWidthALL1)), Literal(hates(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))
subConjToClause((killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!killed(clauseWidthALL0, clauseWidthALL1)), Literal(hates(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))
subConjToClause((richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!richer(clauseWidthALL0, clauseWidthALL1)), Literal(!killed(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))
subConjToClause((richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!richer(clauseWidthALL0, clauseWidthALL1)), Literal(!killed(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))
subConjToClause((every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(clauseWidthALL1, clauseWidthALL0)), FunEquation(every_one_but(clauseWidthALL1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))
subConjToClause((every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(clauseWidthALL1, clauseWidthALL0)), FunEquation(every_one_but(clauseWidthALL1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1))
subConjToClause((clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(FunEquation(every_one_but(clauseWidthALL0, clauseWidthALL2)), FunEquation(every_one_but(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List(Equation(clauseWidthALL2,clauseWidthALL1))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1))
subConjToClause((clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(FunEquation(every_one_but(clauseWidthALL0, clauseWidthALL2)), FunEquation(every_one_but(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List(Equation(clauseWidthALL2,clauseWidthALL1))
	conj.negatedConjs: true
conjToClause((!killed(CONSTANT_1, CONSTANT_1)), false)
	predLiterals: !killed(CONSTANT_1, CONSTANT_1)
	arithLiters: true
	negLiterals: true
conjToClause((!killed(CONSTANT_1, CONSTANT_1)), false)
	predLiterals: !killed(CONSTANT_1, CONSTANT_1)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_0)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_0)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_0)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_0)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_1)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_1)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_1)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_1)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))
subConjToClause((killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!killed(clauseWidthALL0, clauseWidthALL1)), Literal(hates(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))
subConjToClause((killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!killed(clauseWidthALL0, clauseWidthALL1)), Literal(hates(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))
subConjToClause((richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!richer(clauseWidthALL0, clauseWidthALL1)), Literal(!killed(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))
subConjToClause((richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!richer(clauseWidthALL0, clauseWidthALL1)), Literal(!killed(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))
subConjToClause((every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(clauseWidthALL1, clauseWidthALL0)), FunEquation(every_one_but(clauseWidthALL1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))
subConjToClause((every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(clauseWidthALL1, clauseWidthALL0)), FunEquation(every_one_but(clauseWidthALL1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1))
subConjToClause((clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(FunEquation(every_one_but(clauseWidthALL0, clauseWidthALL2)), FunEquation(every_one_but(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List(Equation(clauseWidthALL2,clauseWidthALL1))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1))
subConjToClause((clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(FunEquation(every_one_but(clauseWidthALL0, clauseWidthALL2)), FunEquation(every_one_but(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List(Equation(clauseWidthALL2,clauseWidthALL1))
	conj.negatedConjs: true
conjToClause((!killed(CONSTANT_1, CONSTANT_1)), false)
	predLiterals: !killed(CONSTANT_1, CONSTANT_1)
	arithLiters: true
	negLiterals: true
conjToClause((!killed(CONSTANT_1, CONSTANT_1)), false)
	predLiterals: !killed(CONSTANT_1, CONSTANT_1)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_0)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_0)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_0)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_0)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_1)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_1)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_1)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_1)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_2)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_2)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_2)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_2)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))
subConjToClause((killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!killed(clauseWidthALL0, clauseWidthALL1)), Literal(hates(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))
subConjToClause((killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!killed(clauseWidthALL0, clauseWidthALL1)), Literal(hates(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))
subConjToClause((richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!richer(clauseWidthALL0, clauseWidthALL1)), Literal(!killed(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))
subConjToClause((richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!richer(clauseWidthALL0, clauseWidthALL1)), Literal(!killed(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))
subConjToClause((every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(clauseWidthALL1, clauseWidthALL0)), FunEquation(every_one_but(clauseWidthALL1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))
subConjToClause((every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(clauseWidthALL1, clauseWidthALL0)), FunEquation(every_one_but(clauseWidthALL1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1))
subConjToClause((clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(FunEquation(every_one_but(clauseWidthALL0, clauseWidthALL2)), FunEquation(every_one_but(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List(Equation(clauseWidthALL2,clauseWidthALL1))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1))
subConjToClause((clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(FunEquation(every_one_but(clauseWidthALL0, clauseWidthALL2)), FunEquation(every_one_but(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List(Equation(clauseWidthALL2,clauseWidthALL1))
	conj.negatedConjs: true
conjToClause((!killed(CONSTANT_1, CONSTANT_1)), false)
	predLiterals: !killed(CONSTANT_1, CONSTANT_1)
	arithLiters: true
	negLiterals: true
conjToClause((!killed(CONSTANT_1, CONSTANT_1)), false)
	predLiterals: !killed(CONSTANT_1, CONSTANT_1)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_0)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_0)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_0)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_0)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_1)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_1)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_1)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_1)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_2)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_2)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_2)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_2)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_3)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_3)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_3)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_3)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))
subConjToClause((killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!killed(clauseWidthALL0, clauseWidthALL1)), Literal(hates(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))
subConjToClause((killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!killed(clauseWidthALL0, clauseWidthALL1)), Literal(hates(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))
subConjToClause((richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!richer(clauseWidthALL0, clauseWidthALL1)), Literal(!killed(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))
subConjToClause((richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!richer(clauseWidthALL0, clauseWidthALL1)), Literal(!killed(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))
subConjToClause((every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(clauseWidthALL1, clauseWidthALL0)), FunEquation(every_one_but(clauseWidthALL1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))
subConjToClause((every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(clauseWidthALL1, clauseWidthALL0)), FunEquation(every_one_but(clauseWidthALL1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1))
subConjToClause((clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(FunEquation(every_one_but(clauseWidthALL0, clauseWidthALL2)), FunEquation(every_one_but(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List(Equation(clauseWidthALL2,clauseWidthALL1))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1))
subConjToClause((clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(FunEquation(every_one_but(clauseWidthALL0, clauseWidthALL2)), FunEquation(every_one_but(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List(Equation(clauseWidthALL2,clauseWidthALL1))
	conj.negatedConjs: true
conjToClause((!killed(CONSTANT_1, CONSTANT_1)), false)
	predLiterals: !killed(CONSTANT_1, CONSTANT_1)
	arithLiters: true
	negLiterals: true
conjToClause((!killed(CONSTANT_1, CONSTANT_1)), false)
	predLiterals: !killed(CONSTANT_1, CONSTANT_1)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_0)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_0)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_0)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_0)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_1)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_1)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_1)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_1)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_2)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_2)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_2)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_2)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_3)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_3)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_3)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_3)
	arithLiters: true
	negLiterals: true
conjToClause((killed(CONSTANT_0, CONSTANT_1)), false)
	predLiterals: killed(CONSTANT_0, CONSTANT_1)
	arithLiters: true
	negLiterals: true
conjToClause((killed(CONSTANT_0, CONSTANT_1)), false)
	predLiterals: killed(CONSTANT_0, CONSTANT_1)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))
subConjToClause((killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!killed(clauseWidthALL0, clauseWidthALL1)), Literal(hates(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))
subConjToClause((killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!killed(clauseWidthALL0, clauseWidthALL1)), Literal(hates(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))
subConjToClause((richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!richer(clauseWidthALL0, clauseWidthALL1)), Literal(!killed(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))
subConjToClause((richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!richer(clauseWidthALL0, clauseWidthALL1)), Literal(!killed(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))
subConjToClause((every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(clauseWidthALL1, clauseWidthALL0)), FunEquation(every_one_but(clauseWidthALL1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))
subConjToClause((every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(clauseWidthALL1, clauseWidthALL0)), FunEquation(every_one_but(clauseWidthALL1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1))
subConjToClause((clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(FunEquation(every_one_but(clauseWidthALL0, clauseWidthALL2)), FunEquation(every_one_but(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List(Equation(clauseWidthALL2,clauseWidthALL1))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1))
subConjToClause((clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(FunEquation(every_one_but(clauseWidthALL0, clauseWidthALL2)), FunEquation(every_one_but(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List(Equation(clauseWidthALL2,clauseWidthALL1))
	conj.negatedConjs: true
conjToClause((!killed(CONSTANT_1, CONSTANT_1)), false)
	predLiterals: !killed(CONSTANT_1, CONSTANT_1)
	arithLiters: true
	negLiterals: true
conjToClause((!killed(CONSTANT_1, CONSTANT_1)), false)
	predLiterals: !killed(CONSTANT_1, CONSTANT_1)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_0)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_0)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_0)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_0)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_1)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_1)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_1)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_1)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_2)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_2)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_2)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_2)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_3)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_3)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_3)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_3)
	arithLiters: true
	negLiterals: true
conjToClause((killed(CONSTANT_0, CONSTANT_1)), false)
	predLiterals: killed(CONSTANT_0, CONSTANT_1)
	arithLiters: true
	negLiterals: true
conjToClause((killed(CONSTANT_0, CONSTANT_1)), false)
	predLiterals: killed(CONSTANT_0, CONSTANT_1)
	arithLiters: true
	negLiterals: true
conjToClause((CONSTANT_2 + -1*CONSTANT_1 != 0), false)
	predLiterals: true
	arithLiters: CONSTANT_2 + -1*CONSTANT_1 != 0
	negLiterals: true
conjToClause((CONSTANT_2 + -1*CONSTANT_1 != 0), false)
	predLiterals: true
	arithLiters: CONSTANT_2 + -1*CONSTANT_1 != 0
	negLiterals: true
|| No applicable formula found...
Could not close table


Trying with inital clause: (! (!richer(baseALL0, CONSTANT_1) & !hates(CONSTANT_2, baseALL0)))
conjToClause((! (!richer(baseALL0, CONSTANT_1) & !hates(CONSTANT_2, baseALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(baseALL0, CONSTANT_1) & !hates(CONSTANT_2, baseALL0))
subConjToClause((!richer(baseALL0, CONSTANT_1) & !hates(CONSTANT_2, baseALL0)), true)
	predLiterals: List(Literal(richer(baseALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, baseALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
//-------------------------
|| Starting recursive iteration 0
|| Branches: 
||	(0) Literal(richer(baseALL0, CONSTANT_1))
||	(0) Literal(hates(CONSTANT_2, baseALL0))
|| Extending branch (0): 
||	List(Literal(richer(baseALL0, CONSTANT_1)))
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))
subConjToClause((killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!killed(clauseWidthALL0, clauseWidthALL1)), Literal(hates(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))
subConjToClause((richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!richer(clauseWidthALL0, clauseWidthALL1)), Literal(!killed(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))
subConjToClause((every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(clauseWidthALL1, clauseWidthALL0)), FunEquation(every_one_but(clauseWidthALL1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1))
subConjToClause((clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(FunEquation(every_one_but(clauseWidthALL0, clauseWidthALL2)), FunEquation(every_one_but(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List(Equation(clauseWidthALL2,clauseWidthALL1))
	conj.negatedConjs: true
conjToClause((!killed(CONSTANT_1, CONSTANT_1)), false)
	predLiterals: !killed(CONSTANT_1, CONSTANT_1)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_0)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_0)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_1)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_1)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_2)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_2)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_3)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_3)
	arithLiters: true
	negLiterals: true
conjToClause((killed(CONSTANT_0, CONSTANT_1)), false)
	predLiterals: killed(CONSTANT_0, CONSTANT_1)
	arithLiters: true
	negLiterals: true
conjToClause((CONSTANT_2 + -1*CONSTANT_1 != 0), false)
	predLiterals: true
	arithLiters: CONSTANT_2 + -1*CONSTANT_1 != 0
	negLiterals: true
|| MaxStep: 30
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(branch_0ALL0, branch_0EX0)), false)
	predLiterals: every_one_but(branch_0ALL0, branch_0EX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(branch_0ALL0, CONSTANT_1) & !hates(CONSTANT_2, branch_0ALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(branch_0ALL0, CONSTANT_1) & !hates(CONSTANT_2, branch_0ALL0))
subConjToClause((!richer(branch_0ALL0, CONSTANT_1) & !hates(CONSTANT_2, branch_0ALL0)), true)
	predLiterals: List(Literal(richer(branch_0ALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, branch_0ALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(branch_0ALL0, CONSTANT_1) & !hates(CONSTANT_2, branch_0ALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(branch_0ALL0, CONSTANT_1) & !hates(CONSTANT_2, branch_0ALL0))
subConjToClause((!richer(branch_0ALL0, CONSTANT_1) & !hates(CONSTANT_2, branch_0ALL0)), true)
	predLiterals: List(Literal(richer(branch_0ALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, branch_0ALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, branch_0ALL0) & !hates(CONSTANT_2, branch_0ALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, branch_0ALL0) & !hates(CONSTANT_2, branch_0ALL0))
subConjToClause((hates(CONSTANT_1, branch_0ALL0) & !hates(CONSTANT_2, branch_0ALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, branch_0ALL0)), Literal(hates(CONSTANT_2, branch_0ALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, branch_0ALL0) & !hates(CONSTANT_2, branch_0ALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, branch_0ALL0) & !hates(CONSTANT_2, branch_0ALL0))
subConjToClause((hates(CONSTANT_1, branch_0ALL0) & !hates(CONSTANT_2, branch_0ALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, branch_0ALL0)), Literal(hates(CONSTANT_2, branch_0ALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, branch_0ALL0) & hates(CONSTANT_1, branch_0ALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, branch_0ALL0) & hates(CONSTANT_1, branch_0ALL0))
subConjToClause((hates(CONSTANT_3, branch_0ALL0) & hates(CONSTANT_1, branch_0ALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, branch_0ALL0)), Literal(!hates(CONSTANT_1, branch_0ALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, branch_0ALL0) & hates(CONSTANT_1, branch_0ALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, branch_0ALL0) & hates(CONSTANT_1, branch_0ALL0))
subConjToClause((hates(CONSTANT_3, branch_0ALL0) & hates(CONSTANT_1, branch_0ALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, branch_0ALL0)), Literal(!hates(CONSTANT_1, branch_0ALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (branch_0ALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, branch_0ALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (branch_0ALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, branch_0ALL0))
subConjToClause((branch_0ALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, branch_0ALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, branch_0ALL0)))
	eqLiterals: List(Equation(branch_0ALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (branch_0ALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, branch_0ALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (branch_0ALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, branch_0ALL0))
subConjToClause((branch_0ALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, branch_0ALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, branch_0ALL0)))
	eqLiterals: List(Equation(branch_0ALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (branch_0ALL0 + -1*CONSTANT_3 != 0 & branch_0ALL0 + -1*CONSTANT_2 != 0 & branch_0ALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(branch_0ALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (branch_0ALL0 + -1*CONSTANT_3 != 0 & branch_0ALL0 + -1*CONSTANT_2 != 0 & branch_0ALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(branch_0ALL0))
subConjToClause((branch_0ALL0 + -1*CONSTANT_3 != 0 & branch_0ALL0 + -1*CONSTANT_2 != 0 & branch_0ALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(branch_0ALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(branch_0ALL0)))
	eqLiterals: List(Equation(branch_0ALL0,CONSTANT_3), Equation(branch_0ALL0,CONSTANT_2), Equation(branch_0ALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (branch_0ALL0 + -1*CONSTANT_3 != 0 & branch_0ALL0 + -1*CONSTANT_2 != 0 & branch_0ALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(branch_0ALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (branch_0ALL0 + -1*CONSTANT_3 != 0 & branch_0ALL0 + -1*CONSTANT_2 != 0 & branch_0ALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(branch_0ALL0))
subConjToClause((branch_0ALL0 + -1*CONSTANT_3 != 0 & branch_0ALL0 + -1*CONSTANT_2 != 0 & branch_0ALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(branch_0ALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(branch_0ALL0)))
	eqLiterals: List(Equation(branch_0ALL0,CONSTANT_3), Equation(branch_0ALL0,CONSTANT_2), Equation(branch_0ALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (branch_0ALL0 + -1*CONSTANT_3 != 0 & branch_0ALL0 + -1*CONSTANT_2 != 0 & branch_0ALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(branch_0ALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (branch_0ALL0 + -1*CONSTANT_3 != 0 & branch_0ALL0 + -1*CONSTANT_2 != 0 & branch_0ALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(branch_0ALL0))
subConjToClause((branch_0ALL0 + -1*CONSTANT_3 != 0 & branch_0ALL0 + -1*CONSTANT_2 != 0 & branch_0ALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(branch_0ALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(branch_0ALL0)))
	eqLiterals: List(Equation(branch_0ALL0,CONSTANT_3), Equation(branch_0ALL0,CONSTANT_2), Equation(branch_0ALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (branch_0ALL0 + -1*CONSTANT_3 != 0 & branch_0ALL0 + -1*CONSTANT_2 != 0 & branch_0ALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(branch_0ALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (branch_0ALL0 + -1*CONSTANT_3 != 0 & branch_0ALL0 + -1*CONSTANT_2 != 0 & branch_0ALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(branch_0ALL0))
subConjToClause((branch_0ALL0 + -1*CONSTANT_3 != 0 & branch_0ALL0 + -1*CONSTANT_2 != 0 & branch_0ALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(branch_0ALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(branch_0ALL0)))
	eqLiterals: List(Equation(branch_0ALL0,CONSTANT_3), Equation(branch_0ALL0,CONSTANT_2), Equation(branch_0ALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))
subConjToClause((killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!killed(clauseWidthALL0, clauseWidthALL1)), Literal(hates(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (killed(branch_0ALL0, branch_0ALL1) & !hates(branch_0ALL0, branch_0ALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(branch_0ALL0, branch_0ALL1) & !hates(branch_0ALL0, branch_0ALL1))
subConjToClause((killed(branch_0ALL0, branch_0ALL1) & !hates(branch_0ALL0, branch_0ALL1)), true)
	predLiterals: List(Literal(!killed(branch_0ALL0, branch_0ALL1)), Literal(hates(branch_0ALL0, branch_0ALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))
subConjToClause((killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!killed(clauseWidthALL0, clauseWidthALL1)), Literal(hates(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (killed(branch_0ALL0, branch_0ALL1) & !hates(branch_0ALL0, branch_0ALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(branch_0ALL0, branch_0ALL1) & !hates(branch_0ALL0, branch_0ALL1))
subConjToClause((killed(branch_0ALL0, branch_0ALL1) & !hates(branch_0ALL0, branch_0ALL1)), true)
	predLiterals: List(Literal(!killed(branch_0ALL0, branch_0ALL1)), Literal(hates(branch_0ALL0, branch_0ALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))
subConjToClause((killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!killed(clauseWidthALL0, clauseWidthALL1)), Literal(hates(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))
subConjToClause((killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!killed(clauseWidthALL0, clauseWidthALL1)), Literal(hates(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))
subConjToClause((richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!richer(clauseWidthALL0, clauseWidthALL1)), Literal(!killed(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (richer(branch_0ALL0, branch_0ALL1) & killed(branch_0ALL0, branch_0ALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (richer(branch_0ALL0, branch_0ALL1) & killed(branch_0ALL0, branch_0ALL1))
subConjToClause((richer(branch_0ALL0, branch_0ALL1) & killed(branch_0ALL0, branch_0ALL1)), true)
	predLiterals: List(Literal(!richer(branch_0ALL0, branch_0ALL1)), Literal(!killed(branch_0ALL0, branch_0ALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
BRANCH: (List(Literal(!richer(branch_0ALL0, branch_0ALL1)), Literal(richer(baseALL0, CONSTANT_1))),CloserPair(0,1),16)
	funEqs: List()
	eqs: List()
Applying step: 16
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))
subConjToClause((killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!killed(clauseWidthALL0, clauseWidthALL1)), Literal(hates(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))
subConjToClause((killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!killed(clauseWidthALL0, clauseWidthALL1)), Literal(hates(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))
subConjToClause((richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!richer(clauseWidthALL0, clauseWidthALL1)), Literal(!killed(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
	ALL ALL (! (richer(_0, _1) & killed(_0, _1))) (0)
//-------------------------
|| Starting recursive iteration 1
|| Branches: 
||	(16) Literal(!richer(branch_0ALL0, branch_0ALL1)), Literal(richer(baseALL0, CONSTANT_1)) closed using (0,1)
||	(0) Literal(!killed(branch_0ALL0, branch_0ALL1)), Literal(richer(baseALL0, CONSTANT_1))
||	(0) Literal(hates(CONSTANT_2, baseALL0))
|| Extending branch (1): 
||	List(Literal(!killed(branch_0ALL0, branch_0ALL1)), Literal(richer(baseALL0, CONSTANT_1)))
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))
subConjToClause((killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!killed(clauseWidthALL0, clauseWidthALL1)), Literal(hates(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1))
subConjToClause((richer(clauseWidthALL0, clauseWidthALL1) & killed(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!richer(clauseWidthALL0, clauseWidthALL1)), Literal(!killed(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0))
subConjToClause((every_one_but(clauseWidthALL1, clauseWidthALL0) & hates(clauseWidthALL1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(clauseWidthALL1, clauseWidthALL0)), FunEquation(every_one_but(clauseWidthALL1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1))
subConjToClause((clauseWidthALL2 + -1*clauseWidthALL1 != 0 & every_one_but(clauseWidthALL0, clauseWidthALL2) & every_one_but(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(FunEquation(every_one_but(clauseWidthALL0, clauseWidthALL2)), FunEquation(every_one_but(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List(Equation(clauseWidthALL2,clauseWidthALL1))
	conj.negatedConjs: true
conjToClause((!killed(CONSTANT_1, CONSTANT_1)), false)
	predLiterals: !killed(CONSTANT_1, CONSTANT_1)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_0)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_0)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_1)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_1)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_2)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_2)
	arithLiters: true
	negLiterals: true
conjToClause((lives_at_dreadsbury(CONSTANT_3)), false)
	predLiterals: lives_at_dreadsbury(CONSTANT_3)
	arithLiters: true
	negLiterals: true
conjToClause((killed(CONSTANT_0, CONSTANT_1)), false)
	predLiterals: killed(CONSTANT_0, CONSTANT_1)
	arithLiters: true
	negLiterals: true
conjToClause((CONSTANT_2 + -1*CONSTANT_1 != 0), false)
	predLiterals: true
	arithLiters: CONSTANT_2 + -1*CONSTANT_1 != 0
	negLiterals: true
|| MaxStep: 31
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(branch_1ALL0, branch_1EX0)), false)
	predLiterals: every_one_but(branch_1ALL0, branch_1EX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(branch_1ALL0, CONSTANT_1) & !hates(CONSTANT_2, branch_1ALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(branch_1ALL0, CONSTANT_1) & !hates(CONSTANT_2, branch_1ALL0))
subConjToClause((!richer(branch_1ALL0, CONSTANT_1) & !hates(CONSTANT_2, branch_1ALL0)), true)
	predLiterals: List(Literal(richer(branch_1ALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, branch_1ALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(branch_1ALL0, CONSTANT_1) & !hates(CONSTANT_2, branch_1ALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(branch_1ALL0, CONSTANT_1) & !hates(CONSTANT_2, branch_1ALL0))
subConjToClause((!richer(branch_1ALL0, CONSTANT_1) & !hates(CONSTANT_2, branch_1ALL0)), true)
	predLiterals: List(Literal(richer(branch_1ALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, branch_1ALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, branch_1ALL0) & !hates(CONSTANT_2, branch_1ALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, branch_1ALL0) & !hates(CONSTANT_2, branch_1ALL0))
subConjToClause((hates(CONSTANT_1, branch_1ALL0) & !hates(CONSTANT_2, branch_1ALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, branch_1ALL0)), Literal(hates(CONSTANT_2, branch_1ALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, branch_1ALL0) & !hates(CONSTANT_2, branch_1ALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, branch_1ALL0) & !hates(CONSTANT_2, branch_1ALL0))
subConjToClause((hates(CONSTANT_1, branch_1ALL0) & !hates(CONSTANT_2, branch_1ALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, branch_1ALL0)), Literal(hates(CONSTANT_2, branch_1ALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, branch_1ALL0) & hates(CONSTANT_1, branch_1ALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, branch_1ALL0) & hates(CONSTANT_1, branch_1ALL0))
subConjToClause((hates(CONSTANT_3, branch_1ALL0) & hates(CONSTANT_1, branch_1ALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, branch_1ALL0)), Literal(!hates(CONSTANT_1, branch_1ALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, branch_1ALL0) & hates(CONSTANT_1, branch_1ALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, branch_1ALL0) & hates(CONSTANT_1, branch_1ALL0))
subConjToClause((hates(CONSTANT_3, branch_1ALL0) & hates(CONSTANT_1, branch_1ALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, branch_1ALL0)), Literal(!hates(CONSTANT_1, branch_1ALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (branch_1ALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, branch_1ALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (branch_1ALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, branch_1ALL0))
subConjToClause((branch_1ALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, branch_1ALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, branch_1ALL0)))
	eqLiterals: List(Equation(branch_1ALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (branch_1ALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, branch_1ALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (branch_1ALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, branch_1ALL0))
subConjToClause((branch_1ALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, branch_1ALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, branch_1ALL0)))
	eqLiterals: List(Equation(branch_1ALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (branch_1ALL0 + -1*CONSTANT_3 != 0 & branch_1ALL0 + -1*CONSTANT_2 != 0 & branch_1ALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(branch_1ALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (branch_1ALL0 + -1*CONSTANT_3 != 0 & branch_1ALL0 + -1*CONSTANT_2 != 0 & branch_1ALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(branch_1ALL0))
subConjToClause((branch_1ALL0 + -1*CONSTANT_3 != 0 & branch_1ALL0 + -1*CONSTANT_2 != 0 & branch_1ALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(branch_1ALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(branch_1ALL0)))
	eqLiterals: List(Equation(branch_1ALL0,CONSTANT_3), Equation(branch_1ALL0,CONSTANT_2), Equation(branch_1ALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (branch_1ALL0 + -1*CONSTANT_3 != 0 & branch_1ALL0 + -1*CONSTANT_2 != 0 & branch_1ALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(branch_1ALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (branch_1ALL0 + -1*CONSTANT_3 != 0 & branch_1ALL0 + -1*CONSTANT_2 != 0 & branch_1ALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(branch_1ALL0))
subConjToClause((branch_1ALL0 + -1*CONSTANT_3 != 0 & branch_1ALL0 + -1*CONSTANT_2 != 0 & branch_1ALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(branch_1ALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(branch_1ALL0)))
	eqLiterals: List(Equation(branch_1ALL0,CONSTANT_3), Equation(branch_1ALL0,CONSTANT_2), Equation(branch_1ALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (branch_1ALL0 + -1*CONSTANT_3 != 0 & branch_1ALL0 + -1*CONSTANT_2 != 0 & branch_1ALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(branch_1ALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (branch_1ALL0 + -1*CONSTANT_3 != 0 & branch_1ALL0 + -1*CONSTANT_2 != 0 & branch_1ALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(branch_1ALL0))
subConjToClause((branch_1ALL0 + -1*CONSTANT_3 != 0 & branch_1ALL0 + -1*CONSTANT_2 != 0 & branch_1ALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(branch_1ALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(branch_1ALL0)))
	eqLiterals: List(Equation(branch_1ALL0,CONSTANT_3), Equation(branch_1ALL0,CONSTANT_2), Equation(branch_1ALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (branch_1ALL0 + -1*CONSTANT_3 != 0 & branch_1ALL0 + -1*CONSTANT_2 != 0 & branch_1ALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(branch_1ALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (branch_1ALL0 + -1*CONSTANT_3 != 0 & branch_1ALL0 + -1*CONSTANT_2 != 0 & branch_1ALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(branch_1ALL0))
subConjToClause((branch_1ALL0 + -1*CONSTANT_3 != 0 & branch_1ALL0 + -1*CONSTANT_2 != 0 & branch_1ALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(branch_1ALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(branch_1ALL0)))
	eqLiterals: List(Equation(branch_1ALL0,CONSTANT_3), Equation(branch_1ALL0,CONSTANT_2), Equation(branch_1ALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))
subConjToClause((killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!killed(clauseWidthALL0, clauseWidthALL1)), Literal(hates(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (killed(branch_1ALL0, branch_1ALL1) & !hates(branch_1ALL0, branch_1ALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(branch_1ALL0, branch_1ALL1) & !hates(branch_1ALL0, branch_1ALL1))
subConjToClause((killed(branch_1ALL0, branch_1ALL1) & !hates(branch_1ALL0, branch_1ALL1)), true)
	predLiterals: List(Literal(!killed(branch_1ALL0, branch_1ALL1)), Literal(hates(branch_1ALL0, branch_1ALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1))
subConjToClause((killed(clauseWidthALL0, clauseWidthALL1) & !hates(clauseWidthALL0, clauseWidthALL1)), true)
	predLiterals: List(Literal(!killed(clauseWidthALL0, clauseWidthALL1)), Literal(hates(clauseWidthALL0, clauseWidthALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (killed(branch_1ALL0, branch_1ALL1) & !hates(branch_1ALL0, branch_1ALL1))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (killed(branch_1ALL0, branch_1ALL1) & !hates(branch_1ALL0, branch_1ALL1))
subConjToClause((killed(branch_1ALL0, branch_1ALL1) & !hates(branch_1ALL0, branch_1ALL1)), true)
	predLiterals: List(Literal(!killed(branch_1ALL0, branch_1ALL1)), Literal(hates(branch_1ALL0, branch_1ALL1)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((every_one_but(clauseWidthALL0, clauseWidthEX0)), false)
	predLiterals: every_one_but(clauseWidthALL0, clauseWidthEX0)
	arithLiters: true
	negLiterals: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((!richer(clauseWidthALL0, CONSTANT_1) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(richer(clauseWidthALL0, CONSTANT_1)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0))
subConjToClause((hates(CONSTANT_1, clauseWidthALL0) & !hates(CONSTANT_2, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_1, clauseWidthALL0)), Literal(hates(CONSTANT_2, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((hates(CONSTANT_3, clauseWidthALL0) & hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(!hates(CONSTANT_3, clauseWidthALL0)), Literal(!hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_2 != 0 & !hates(CONSTANT_1, clauseWidthALL0)), true)
	predLiterals: List(Literal(hates(CONSTANT_1, clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_2))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true
conjToClause((! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0))
subConjToClause((clauseWidthALL0 + -1*CONSTANT_3 != 0 & clauseWidthALL0 + -1*CONSTANT_2 != 0 & clauseWidthALL0 + -1*CONSTANT_1 != 0 & lives_at_dreadsbury(clauseWidthALL0)), true)
	predLiterals: List(Literal(!lives_at_dreadsbury(clauseWidthALL0)))
	eqLiterals: List(Equation(clauseWidthALL0,CONSTANT_3), Equation(clauseWidthALL0,CONSTANT_2), Equation(clauseWidthALL0,CONSTANT_1))
	conj.negatedConjs: true





conjToClause((! (every_one_but(convALL1, convALL0) & hates(convALL1, convALL0))), false)
	predLiterals: true
	arithLiters: true
	negLiterals: ! (every_one_but(convALL1, convALL0) & hates(convALL1, convALL0))
subConjToClause((every_one_but(convALL1, convALL0) & hates(convALL1, convALL0)), true)
	predLiterals: List(Literal(!hates(convALL1, convALL0)), FunEquation(every_one_but(convALL1, convALL0)))
	eqLiterals: List()
	conj.negatedConjs: true
	ALL ALL (! (every_one_but(_1, _0) & hates(_1, _0))) => List(List(Literal(!hates(convALL1, convALL0))), List(FunEquation(every_one_but(convALL1, convALL0))))